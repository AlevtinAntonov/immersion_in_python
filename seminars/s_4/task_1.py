# Задание №1
# ✔ Напишите функцию, которая принимает строку текста.
# Вывести функцией каждое слово с новой строки.
# ✔ Строки нумеруются начиная с единицы.
# ✔ Слова выводятся отсортированными согласно кодировки Unicode.
# ✔ Текст выравнивается по правому краю так, чтобы у самого
# длинного слова был один пробел между ним и номером строки.

import re

text_string = 'Этот метод сортирует список на месте, используя только < сравнения между элементами.' \
              ' Исключения не подавляются - если какие-либо операции сравнения завершатся неудачей, ' \
              'вся операция сортировки завершится неудачей (и список, скорее всего, останется в частично ' \
              'измененном состоянии).' \
              'sort() принимает два аргумента, которые могут быть переданы только по ключевому слову (аргументы ' \
              'только для ключевых слов): ' \
              'key определяет функцию с одним аргументом, которая используется для извлечения ключа сравнения ' \
              'из каждого элемента списка (например, key=str.lower). Ключ, соответствующий каждому элементу ' \
              'в списке, вычисляется один раз, а затем используется для всего процесса сортировки. Значение по ' \
              'умолчанию None означает, что элементы списка сортируются напрямую, без вычисления отдельного ' \
              'значения ключа.'

def my_sort_func(in_text):
    formatted_text = sorted(re.sub(r'[.,"\'-?:!;()]', '', in_text.lower()).split())
    print(formatted_text)
    max_length = len(max(formatted_text, key=len))
    print(max_length)
    for index, value in enumerate(formatted_text, start=1):
        out_text = '\n'.join(f'{index} {value:>{max_length}} ')


    return out_text

print(my_sort_func(text_string))